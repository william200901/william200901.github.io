<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>The Secret of Memory</title>
    <url>/2021/02/25/The-Secret-of-Memory/</url>
    <content><![CDATA[<p><img src="/2021/02/25/The-Secret-of-Memory/The-Secret-of-Memory.jpg"></p>
<h2 id="总体观感"><a href="#总体观感" class="headerlink" title="总体观感"></a>总体观感</h2><p>这本书先介绍了记忆法的历史，之后提到了现在的一些记忆术，其中讲了很多实验，但是无论是实验还是故事的描述都不够清晰，实验过程也许需要更多时间去体会，毕竟是他人花费心力设计的实验，总不至于草草略读便可以理解。</p>
<p>还不够细致的读完一遍后，了解到了古代的地点记忆法；之后的数字-字母、数字-图像编码等方式，感觉现在来看并不实用；书后也有讲到很多关于记忆的内容。最后得出的结论则是，不管采用什么技巧，记忆终归是要符合遗忘规律的，为使大脑保持灵光，最好的办法就是尝试各种不同的活动，多刺激大脑了。</p>
<h2 id="记忆法的历史"><a href="#记忆法的历史" class="headerlink" title="记忆法的历史"></a>记忆法的历史</h2><p><strong>古代地点记忆法：</strong></p>
<p>西蒙尼德斯的传说：古希腊诗人西蒙尼德斯曾受邀在一场宴会上作诗，他诗中的一部分包含了对双子神卡斯托尔和波鲁克斯的赞美，而这不被其他人接受，因此说好的稿费也只能拿到一半，说是另一半稿费应该找双子神去要。可怜的西蒙尼德斯只好退居一旁。稍后，门童来报，门外有两个年轻男子有事找西蒙尼德斯。西蒙尼德斯出去后却没有见到任何人。同时，西蒙尼德斯刚走出宴会厅时，厅堂便轰然倒塌，其他人都被砸死，面目全非，来收尸的家属也无法辨认。而西蒙尼德斯却发现他记得每个人的位置和特征，于是他根据座位告诉收尸者哪一位是他们的亲人······</p>
<blockquote>
<p>这便是地点记忆法的手段。地点记忆法是利用心里熟知的一幅地图，将需要记忆的内容与地图关联起来。回想这条路线图时，我们便可以有序的回想其与之关联的内容。</p>
</blockquote>
<h2 id="记忆术"><a href="#记忆术" class="headerlink" title="记忆术"></a>记忆术</h2><p>短时记忆只有20秒中，7个记忆存储，虽没办法提升，但可以使用技巧提高记忆能力，如分类记忆。</p>
<p>关于人的记忆，阿兹海默病是指老年痴呆，忘掉过去是逆行性记忆障碍，而确实存在着只记得过去发生的事情，会忘掉事故后短时间发生的事情的病例，这是顺行性记忆障碍。</p>
<p>记忆有两种：程序性记忆和陈述性记忆。程序性记忆，如学习骑自行车等的非明确记忆，走路，驾驶车辆，写字等等都属于程序性记忆。陈述性记忆则包含回忆和对事物有意识的认知。</p>
<p>语词记忆和语义记忆。视觉形态和文字发音都可以激活一种词的形态上的记忆，它们的载体便是语词记忆。默读是很有意义的，因为视觉和听觉记忆的持续时间都很短，而默读的重复可以帮助我们更持久的记忆。语义记忆则是最强力持久的记忆，即理解。</p>
<p>关于学习：学习过程中穿插休息时间效果会更好。这一点在之前《幸福课》中也有听到，值得去尝试。临时抱佛脚的方式，短期记忆确实可以，但是若想长期记忆，此方法还是不可行的，临近考试的时候更应该休息才是。</p>
<p>人对图像的记忆时间是短暂的，只能持续1/4秒。若人的视觉记忆能够持续的视觉更长，我们便会感到几幅图像重叠在一起了。听觉记忆、嗅觉记忆等也都是不稳定的记忆。</p>
<p>记忆人，可以考虑将人脸的特征和名字结合起来记忆。</p>
<p>最后，以前一直反感的，将需要记忆的单词首字母组成单词或句子等方式记忆，实际是很有效的。</p>
]]></content>
      <categories>
        <category>book</category>
      </categories>
      <tags>
        <tag>book</tag>
        <tag>memory</tag>
      </tags>
  </entry>
  <entry>
    <title>Grammer of Markdown</title>
    <url>/2021/02/25/Grammer-of-Markdown/</url>
    <content><![CDATA[<p><strong>2021.2.25</strong></p>
<p>hexo的markdown文件中，description部分用英文中括号修饰会报错。</p>
<hr>
<h1 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World!"></a>Hello World!</h1><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h1 id="一级"><a href="#一级" class="headerlink" title="一级"></a>一级</h1><h2 id="二级"><a href="#二级" class="headerlink" title="二级"></a>二级</h2><h3 id="三级"><a href="#三级" class="headerlink" title="三级"></a>三级</h3><h4 id="四级"><a href="#四级" class="headerlink" title="四级"></a>四级</h4><h5 id="五级"><a href="#五级" class="headerlink" title="五级"></a>五级</h5><h6 id="六级"><a href="#六级" class="headerlink" title="六级"></a>六级</h6><p><em>斜体文本</em></p>
<p><em>斜体文本</em>   </p>
<p><strong>粗体文本</strong></p>
<p><strong>粗体文本</strong></p>
<p><strong><em>斜粗体文本</em></strong></p>
<p><strong><em>斜粗体文本</em></strong></p>
<hr>
<hr>
<hr>
<hr>
<hr>
<hr>
<hr>
<hr>
<p><del><strong>delete line</strong></del></p>
<p><u>下划线</u></p>
<p>脚注[^脚注]<br>[^脚注]脚注</p>
<hr>
<ul>
<li>first</li>
<li>second</li>
<li>third  </li>
</ul>
<ul>
<li>first</li>
<li>second</li>
<li>third</li>
</ul>
<ul>
<li>first</li>
<li>second</li>
<li>third  </li>
</ul>
<ol>
<li>first</li>
<li>second</li>
<li>third  </li>
</ol>
<p>换行  </p>
<p>换行  </p>
<blockquote>
<p>最外</p>
<blockquote>
<p>第二</p>
<blockquote>
<p>第三</p>
</blockquote>
</blockquote>
</blockquote>
<blockquote>
<p>区块用链表</p>
<ol>
<li>第一</li>
<li>第二</li>
<li>第三</li>
</ol>
<ul>
<li>第一</li>
<li>第二</li>
</ul>
</blockquote>
<ul>
<li><p>第一项</p>
<blockquote>
<p>区块<br>区块</p>
</blockquote>
</li>
<li><p>第二项</p>
<blockquote>
<p>区块</p>
</blockquote>
</li>
</ul>
<p><code>printf()</code>函数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">include &lt;stdio.h&gt;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">include &lt;stdio.h&gt;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;helloworld&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">helloworld</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">char</span> argv[],<span class="keyword">int</span> argc)</span></span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;helloworld&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://www.bilibili.com/">a link</a><br><a href="https://www.bilibili.com/">https://www.bilibili.com</a></p>
<p>用1作网址变量<a href="https://www.bilibili.com/">bilibili</a><br>用字符串作网址变量<a href="https://www.zhihu.com/">zhihu</a><br><strong>文档结尾给变量赋值（网址）</strong></p>
<p><img src="http://static.runoob.com/images/runoob-logo.png" alt="RUNOOB 图标"></p>
<p><img src="http://static.runoob.com/images/runoob-logo.png" alt="RUNOOB 图标" title="RUNOOB"></p>
<p>这个链接用 1 作为网址变量 <a href="https://www.bilibili.com/">RUNOOB</a>.<br>然后在文档的结尾为变量赋值（网址）</p>
<img src="http://static.runoob.com/images/runoob-logo.png" width="50%">


<table>
<thead>
<tr>
<th>表头</th>
<th>表头</th>
</tr>
</thead>
<tbody><tr>
<td>单元格</td>
<td>单元格</td>
</tr>
<tr>
<td>单元格</td>
<td>单元格</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="left">左对齐</th>
<th align="right">右对齐</th>
<th align="center">居中对齐</th>
</tr>
</thead>
<tbody><tr>
<td align="left">单元格</td>
<td align="right">单元格</td>
<td align="center">单元格</td>
</tr>
<tr>
<td align="left">单元格</td>
<td align="right">单元格</td>
<td align="center">单元格</td>
</tr>
</tbody></table>
<p>$$<br>\mathbf{V}_1 \times \mathbf{V}_2 =  \begin{vmatrix}<br>\mathbf{i} &amp; \mathbf{j} &amp; \mathbf{k} \<br>\frac{\partial X}{\partial u} &amp;  \frac{\partial Y}{\partial u} &amp; 0 \<br>\frac{\partial X}{\partial v} &amp;  \frac{\partial Y}{\partial v} &amp; 0 \<br>\end{vmatrix}<br>${$tep1}{\style{visibility:hidden}{(x+1)(x+1)}}<br>$$</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A[方形] --&gt;B(圆角)</span><br><span class="line">    B --&gt; C&#123;条件a&#125;</span><br><span class="line">    C --&gt;|a&#x3D;1| D[结果1]</span><br><span class="line">    C --&gt;|a&#x3D;2| E[结果2]</span><br><span class="line">    F[横向流程图]</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph TD</span><br><span class="line">A[方形] --&gt; B(圆角)</span><br><span class="line">    B --&gt; C&#123;条件a&#125;</span><br><span class="line">    C --&gt; |a&#x3D;1| D[结果1]</span><br><span class="line">    C --&gt; |a&#x3D;2| E[结果2]</span><br><span class="line">    F[竖向流程图]</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">st&#x3D;&gt;start: 开始框</span><br><span class="line">op&#x3D;&gt;operation: 处理框</span><br><span class="line">cond&#x3D;&gt;condition: 判断框(是或否?)</span><br><span class="line">sub1&#x3D;&gt;subroutine: 子流程</span><br><span class="line">io&#x3D;&gt;inputoutput: 输入输出框</span><br><span class="line">e&#x3D;&gt;end: 结束框</span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;io-&gt;e</span><br><span class="line">cond(no)-&gt;sub1(right)-&gt;op</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">st&#x3D;&gt;start: 开始框</span><br><span class="line">op&#x3D;&gt;operation: 处理框</span><br><span class="line">cond&#x3D;&gt;condition: 判断框(是或否?)</span><br><span class="line">sub1&#x3D;&gt;subroutine: 子流程</span><br><span class="line">io&#x3D;&gt;inputoutput: 输入输出框</span><br><span class="line">e&#x3D;&gt;end: 结束框</span><br><span class="line">st(right)-&gt;op(right)-&gt;cond</span><br><span class="line">cond(yes)-&gt;io(bottom)-&gt;e</span><br><span class="line">cond(no)-&gt;sub1(right)-&gt;op</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">对象A-&gt;对象B: 对象B你好吗?（请求）</span><br><span class="line">Note right of 对象B: 对象B的描述</span><br><span class="line">Note left of 对象A: 对象A的描述(提示)</span><br><span class="line">对象B--&gt;对象A: 我很好(响应)</span><br><span class="line">对象A-&gt;对象B: 你真的好吗？</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Title: 标题：复杂使用</span><br><span class="line">对象A-&gt;对象B: 对象B你好吗?（请求）</span><br><span class="line">Note right of 对象B: 对象B的描述</span><br><span class="line">Note left of 对象A: 对象A的描述(提示)</span><br><span class="line">对象B--&gt;对象A: 我很好(响应)</span><br><span class="line">对象B-&gt;小三: 你好吗</span><br><span class="line">小三--&gt;&gt;对象A: 对象B找我了</span><br><span class="line">对象A-&gt;对象B: 你真的好吗？</span><br><span class="line">Note over 小三,对象B: 我们是朋友</span><br><span class="line">participant C</span><br><span class="line">Note right of C: 没人陪我玩</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">%% 时序图例子,-&gt; 直线，--&gt;虚线，-&gt;&gt;实线箭头</span><br><span class="line">  sequenceDiagram</span><br><span class="line">    participant 张三</span><br><span class="line">    participant 李四</span><br><span class="line">    张三-&gt;王五: 王五你好吗？</span><br><span class="line">    loop 健康检查</span><br><span class="line">        王五-&gt;王五: 与疾病战斗</span><br><span class="line">    end</span><br><span class="line">    Note right of 王五: 合理 食物 &lt;br&#x2F;&gt;看医生...</span><br><span class="line">    李四--&gt;&gt;张三: 很好!</span><br><span class="line">    王五-&gt;李四: 你怎么样?</span><br><span class="line">    李四--&gt;王五: 很好!</span><br></pre></td></tr></table></figure>


<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">%% 语法示例</span><br><span class="line">        gantt</span><br><span class="line">        dateFormat  YYYY-MM-DD</span><br><span class="line">        title 软件开发甘特图</span><br><span class="line">        section 设计</span><br><span class="line">        需求                      :done,    des1, 2014-01-06,2014-01-08</span><br><span class="line">        原型                      :active,  des2, 2014-01-09, 3d</span><br><span class="line">        UI设计                     :         des3, after des2, 5d</span><br><span class="line">    未来任务                     :         des4, after des3, 5d</span><br><span class="line">        section 开发</span><br><span class="line">        学习准备理解需求                      :crit, done, 2014-01-06,24h</span><br><span class="line">        设计框架                             :crit, done, after des2, 2d</span><br><span class="line">        开发                                 :crit, active, 3d</span><br><span class="line">        未来任务                              :crit, 5d</span><br><span class="line">        耍                                   :2d</span><br><span class="line">        section 测试</span><br><span class="line">        功能测试                              :active, a1, after des3, 3d</span><br><span class="line">        压力测试                               :after a1  , 20h</span><br><span class="line">        测试报告                               : 48h</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>technology</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>Bulid Blog With Hexo</title>
    <url>/2020/09/22/build-blog/</url>
    <content><![CDATA[<h2 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1.环境准备"></a>1.环境准备</h2><p>安装环境为win10；<br>安装hexo框架，需要先安装该框架的依赖环境：<br>1.hexo<br>2.Git</p>
<p>hexo博客框架基于Node.js渲染，必须先安装Node.js环境。<br>Git 用来帮助部署到Github Pages静态仓库上，以域名的形式访问。</p>
<h2 id="2-安装过程"><a href="#2-安装过程" class="headerlink" title="2.安装过程"></a>2.安装过程</h2><h3 id="2-1安装hexo"><a href="#2-1安装hexo" class="headerlink" title="2.1安装hexo"></a>2.1安装hexo</h3><p>打开Git Bash, 安装过程大多使用npm命令（源在国外）</p>
<p>安装hexo，在GItBash中输入以下命令，等待操作完成：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm install -g hexo</span><br></pre></td></tr></table></figure>
<h3 id="2-2初始化hexo"><a href="#2-2初始化hexo" class="headerlink" title="2.2初始化hexo"></a>2.2初始化hexo</h3><p>创建hexo文件夹，我个人是F:\blog\hexo，存放文章和代码的地方:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cd &#x2F;f&#x2F;blog&#x2F;hexo</span><br><span class="line">$ hexo init</span><br></pre></td></tr></table></figure>
<p>通过以上命令就在对应位置创建并初始化好了hexo文件夹。  </p>
<p>hexo文件夹中有一个<code>_config.yml</code>文件，为站点根目录配置文件，在其中可修改blog的各种配置。<br>比如切换语言为中文，将language值修改为zh-CN：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Site 站点主配置</span><br><span class="line">title: sanarous教你搭建Hexo博客  &#x2F;&#x2F;网站标题修改</span><br><span class="line">subtitle: so easy~  &#x2F;&#x2F;副标题修改</span><br><span class="line">description:  &#x2F;&#x2F;网站描述</span><br><span class="line">keywords: hexo,next,Java,博客    &#x2F;&#x2F;网站关键字,用英文逗号分开</span><br><span class="line">author: Sanarous   &#x2F;&#x2F;此处填写你自己的昵称  </span><br><span class="line">+ language: zh-CN    &#x2F;&#x2F;这里改成上面在主题配置文件中看到的语言名字，注意英文冒号:后面有一个空格</span><br><span class="line">timezone:   &#x2F;&#x2F;网站时区，保持默认就可以了</span><br></pre></td></tr></table></figure>
<p>之后回到GitBash命令行，在hexo根目录输入以下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo g &amp;&amp; hexo s</span><br></pre></td></tr></table></figure>
<p>再打开浏览器，输入<code>http://localhost:4000</code>就可以看到已经做好的博客<br><code>hexo g</code>即<code>hexo generate</code>是重新生成public文件夹的命令，<code>hexo s</code>即<code>hexo server</code>是开启hexo服务器的命令。<code>hexo s</code>具有在线调试的功能。  </p>
<p>public 文件夹是生成的所有静态文件，html、css、js文件以及图片等。这个文件夹是博客被Node.js渲染后生成的最终文件夹。</p>
<h3 id="2-3将hexo博客部署到GitHub上"><a href="#2-3将hexo博客部署到GitHub上" class="headerlink" title="2.3将hexo博客部署到GitHub上"></a>2.3将hexo博客部署到GitHub上</h3><p>具体操作见参考文章</p>
<h3 id="2-4写博客"><a href="#2-4写博客" class="headerlink" title="2.4写博客"></a>2.4写博客</h3><p>在hexo根目录执行gitbash命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo new &lt;postname&gt;</span><br></pre></td></tr></table></figure>
<p>就可以在<code>hexo/source/_posts</code> 文件夹下新建一个<code>.md</code>文件，即markdown文件，写博客只需本地编辑该文件。</p>
<p>将本地更新上传到GitHub上，使用命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo clean &amp;&amp; hexo g &amp;&amp; hexo deploy</span><br></pre></td></tr></table></figure>

<h2 id="3-写博客遇到的坑"><a href="#3-写博客遇到的坑" class="headerlink" title="3.写博客遇到的坑"></a>3.写博客遇到的坑</h2><ol>
<li>md文件最上的title内容不能带引号，否则会出错</li>
<li>关于图片的引用不能推送至github：下载个插件，修改下_config.yml。详情google</li>
</ol>
<h2 id="4-主题-amp-功能配置"><a href="#4-主题-amp-功能配置" class="headerlink" title="4.主题&amp;功能配置"></a>4.主题&amp;功能配置</h2><h3 id="4-1关于配置文件的说明"><a href="#4-1关于配置文件的说明" class="headerlink" title="4.1关于配置文件的说明"></a>4.1关于配置文件的说明</h3><p>使用到的有2个配置文件：hexo文件夹下的<code>_config.yml</code>配置文件；主题中的配置文件<code>hexo\themes\next6\_config.yml</code>，其中next6为下载的主题文件夹名称。</p>
<h3 id="4-2下载安装Next主题"><a href="#4-2下载安装Next主题" class="headerlink" title="4.2下载安装Next主题"></a>4.2下载安装Next主题</h3><p>我使用的是Next6版本，下载地址：<a href="https://github.com/theme-next/hexo-theme-next">https://github.com/theme-next/hexo-theme-next</a><br>将下载好的主题放在<code>F:\blog\hexo\themes\</code>下面。</p>
<h3 id="4-3设置主题为Next主题"><a href="#4-3设置主题为Next主题" class="headerlink" title="4.3设置主题为Next主题"></a>4.3设置主题为Next主题</h3><p>站点根目录的配置文件<code>_config.yml</code>中，修改主题名：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Extensions</span><br><span class="line">## Plugins: https:&#x2F;&#x2F;hexo.io&#x2F;plugins&#x2F;</span><br><span class="line">## Themes: https:&#x2F;&#x2F;hexo.io&#x2F;themes&#x2F;</span><br><span class="line">- theme: landscape      # 更改原始默认的主题名称，修改为如下</span><br><span class="line">+ theme: hexo-theme-next   # 此处填入你在themes目录下的next主题文件名</span><br></pre></td></tr></table></figure>

<h3 id="4-4Next主题功能配置"><a href="#4-4Next主题功能配置" class="headerlink" title="4.4Next主题功能配置"></a>4.4Next主题功能配置</h3><p>以下配置若未特别提及，均在主题配置文件中更改</p>
<h4 id="4-4-1修改favicon图标"><a href="#4-4-1修改favicon图标" class="headerlink" title="4.4.1修改favicon图标"></a>4.4.1修改favicon图标</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">favicon:</span><br><span class="line">  small: &#x2F;images&#x2F;1.png</span><br><span class="line">  medium: &#x2F;images&#x2F;1.png</span><br><span class="line">  apple_touch_icon: &#x2F;1.png</span><br><span class="line">  safari_pinned_tab: &#x2F;1.png</span><br><span class="line">  #android_manifest: &#x2F;images&#x2F;manifest.json</span><br><span class="line">  #ms_browserconfig: &#x2F;images&#x2F;browserconfig.xml</span><br></pre></td></tr></table></figure>
<p>将想用图标放在主题目录<code>source\images</code>中按照相对路径方式引用即可。也可直接引用第三方图片链接。</p>
<h4 id="4-4-2阅读更多按钮设置"><a href="#4-4-2阅读更多按钮设置" class="headerlink" title="4.4.2阅读更多按钮设置"></a>4.4.2阅读更多按钮设置</h4><p>1.文章首部<code>front-matter</code>中添加description，提供文章摘录。注意主题配置文件中设置<code>excerpt_description</code>为true才会生效<br>2.在文章中插入<code>&lt;!-- more --&gt;</code>，则该标识后的内容不会显示出来，使用灵活。</p>
<h4 id="4-4-3设置文章阅读量"><a href="#4-4-3设置文章阅读量" class="headerlink" title="4.4.3设置文章阅读量"></a>4.4.3设置文章阅读量</h4><p>搜索<code>leancloud_visitors</code>,将enable设置为true。需要安装<code>hexo-leancloud-counter-security</code>模块。和valine评论一样，需要的leanCloud的appid和appkey，并且要在leancloud中创建classes对象存储。还需要在根目录配置文件中加入以下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">leancloud_counter_security:</span><br><span class="line">  enable_sync: true</span><br></pre></td></tr></table></figure>

<h4 id="4-4-4看板娘设置"><a href="#4-4-4看板娘设置" class="headerlink" title="4.4.4看板娘设置"></a>4.4.4看板娘设置</h4><p>见文章:<a href="https://github.com/stevenjoezhang/live2d-widget">https://github.com/stevenjoezhang/live2d-widget</a></p>
<h2 id="5-参考文章"><a href="#5-参考文章" class="headerlink" title="5.参考文章"></a>5.参考文章</h2><p><a href="https://blog.bestzuo.cn/posts/blog-establish.html">Hexo博客+Next主题深度优化与定制</a><br><a href="http://yearito.cn/posts/hexo-advanced-settings.html">Hexo 搭建个人博客系列：进阶设置篇</a><br><a href="https://github.com/stevenjoezhang/live2d-widget">把萌萌哒的看板娘抱回家 (ノ≧∇≦)ノ | Live2D widget for web platform</a><br><a href="https://blog.csdn.net/wugenqiang/article/details/89057323">图片单击放大</a><br><a href="https://yangbingdong.com/2017/build-blog-hexo-advanced/#%E5%AE%9A%E4%BD%8D%E5%85%83%E7%B4%A0">基于Hexo搭建个人博客——进阶篇(从入门到入土)</a></p>
]]></content>
      <categories>
        <category>technology</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>One word one day</title>
    <url>/2021/02/09/one-word-one-day/</url>
    <content><![CDATA[<h4 id="2021-2-9"><a href="#2021-2-9" class="headerlink" title="2021.2.9"></a>2021.2.9</h4><p>万事开头难。</p>
<p>这句话还是有其道理的。5分钟原则：面对拖延症，先去做5分钟再说。一直以来常常感觉到的，吃饭前还专心做的事情，吃完饭后却很难再开始，这或许正是因为停止了做这件事情，所以又需要重新开头。还有很多不想去做的事情，心里就是不想去做，迟迟无法开始，但其实，如果能够坚持去做5分钟，慢慢的就开始做正事了。好了，写完这么多后，我不想干活的心情确实就变淡了，差不该开始干活了。</p>
]]></content>
      <categories>
        <category>life</category>
      </categories>
      <tags>
        <tag>word</tag>
      </tags>
  </entry>
  <entry>
    <title>Some Pictures</title>
    <url>/2020/11/16/some-pictures/</url>
    <content><![CDATA[<p><img src="/2020/11/16/some-pictures/1.jpg"><br><br></p>
<p><img src="/2020/11/16/some-pictures/1.png"><br><br></p>
<p><img src="/2020/11/16/some-pictures/2.jpg"><br><br></p>
<p><img src="/2020/11/16/some-pictures/3.png"><br><br></p>
<p><img src="/2020/11/16/some-pictures/4.jpg"><br><br></p>
<p><img src="/2020/11/16/some-pictures/6.jpg"><br><br></p>
<p><img src="/2020/11/16/some-pictures/15.png"><br><br></p>
<p><img src="/2020/11/16/some-pictures/16.jpg"><br><br></p>
<p><img src="/2020/11/16/some-pictures/28.png"><br><br></p>
<p><img src="/2020/11/16/some-pictures/42.png"><br><br></p>
<p><img src="/2020/11/16/some-pictures/63.png"><br><br></p>
<p><img src="/2020/11/16/some-pictures/70.png"></p>
<p><img src="/2020/11/16/some-pictures/79.jpg"><br><br></p>
<p><img src="/2020/11/16/some-pictures/100.jpg"><br><br></p>
<p><img src="/2020/11/16/some-pictures/109.jpg"><br><br></p>
]]></content>
      <categories>
        <category>resource</category>
      </categories>
      <tags>
        <tag>picture</tag>
      </tags>
  </entry>
  <entry>
    <title>vuejs-learn</title>
    <url>/2020/11/23/vuejs-learn/</url>
    <content><![CDATA[<h2 id="1-一些有用的工具"><a href="#1-一些有用的工具" class="headerlink" title="1.一些有用的工具"></a>1.一些有用的工具</h2><h3 id="1-1Chrome插件"><a href="#1-1Chrome插件" class="headerlink" title="1.1Chrome插件"></a>1.1Chrome插件</h3><p>Vue.js devtools:开发vue.js非常有用</p>
<p>AdBlock：屏蔽广告，真心好用</p>
<p>minerBlock:防止电脑被人恶意当作挖矿机使用</p>
<h3 id="1-2VScode插件"><a href="#1-2VScode插件" class="headerlink" title="1.2VScode插件"></a>1.2VScode插件</h3><p>vscode-icons</p>
<p>ESlint</p>
<p>Vetur</p>
<p>Beautify</p>
<p>Markdown Preview Enhanced</p>
<p>One Dark Pro</p>
<p>Solarized-light Theme</p>
]]></content>
      <categories>
        <category>techlonogy</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue-cli + Element-ui 前端开发</title>
    <url>/2020/09/25/vue-cli-Element-ui/</url>
    <content><![CDATA[<h1 id="1-开发环境搭建"><a href="#1-开发环境搭建" class="headerlink" title="1.开发环境搭建"></a>1.开发环境搭建</h1><h2 id="1-1前期准备"><a href="#1-1前期准备" class="headerlink" title="1.1前期准备"></a>1.1前期准备</h2><ul>
<li>需要提前安装Node.js</li>
<li>使用npm（需要node环境）全局安装webpack</li>
<li>推荐安装Git，Git用处挺大，有机会单独写写关于Git的使用经验</li>
<li>编辑器推荐VS Code</li>
</ul>
<p>webpack 4.X开始，需要安装webpack-cli依赖，故使用以下命令同时安装webpack和webpack-cli:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install webpack webpack-cli -g</span><br></pre></td></tr></table></figure>
<p>安装成功后，输入命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">webpack -v</span><br></pre></td></tr></table></figure>
<p>显示出webpack的版本号则表示安装成功<br><br><br>有了webpack-dev-server 的支持，可以启动一个请求服务器，为你搭建一个测试环境，可以在线调试</p>
<h2 id="1-2安装vue-cli"><a href="#1-2安装vue-cli" class="headerlink" title="1.2安装vue-cli"></a>1.2安装vue-cli</h2><p>安装好上述的webpack后，全局安装vue-cli，在cmd（或gitbash）中输入命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install --global vue-cli</span><br></pre></td></tr></table></figure>
<p>安装完成后，使用命令查看vue-cli版本(注意命令中的-V为大写)：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vue -V</span><br></pre></td></tr></table></figure>
<p>成功显示出版本号则表示安装成功<br><br><br>打开C:\Users\Andminster\AppData\Roaming\npm 目录可以看见圈出部分，说明已安装好：</p>
<p><img src="/2020/09/25/vue-cli-Element-ui/myBlog-vuecli-1.png"></p>
<h2 id="1-3用vue-cli构建新项目"><a href="#1-3用vue-cli构建新项目" class="headerlink" title="1.3用vue-cli构建新项目"></a>1.3用vue-cli构建新项目</h2><ol>
<li>在F盘新建一个文件夹vueProj,用来存放项目，cd命令进入该文件夹，执行命令： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vue init webpack test</span><br></pre></td></tr></table></figure>
 之后会跳出一系列选项，可以一直回车确认，选择默认项，但是否使用ESLint一项建议选择no（ESLint是一款检查代码错误和规范的插件，但因为太严格，所以不推荐使用）<br> 选项确认完毕后就开始构建项目了</li>
<li>项目构建完成后，cd命令<code>cd test</code>进入项目文件夹，使用下面命令可以安装全部项目依赖 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure>
 但使用<code>vue init webpack test</code>命令构建项目以及选择了安装全部依赖选项，故不必再执行上述命令。<br> 安装好后的文件夹如下:<br> <img src="/2020/09/25/vue-cli-Element-ui/myBlog-vuecli-2.png"></li>
<li>在项目根目录test下，运行命令： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure>
 然后会开启一个本服务器，按地址访问即可看见初始的helloworld界面。</li>
</ol>
<p>至此，最经典的helloworld示例便完成了。</p>
<h1 id="2-上手新项目的流程"><a href="#2-上手新项目的流程" class="headerlink" title="2.上手新项目的流程"></a>2.上手新项目的流程</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vue init webpack proj</span><br></pre></td></tr></table></figure>
<p>使用该命令创建包含路由的项目proj。<br><br></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i element-ui -s</span><br></pre></td></tr></table></figure>
<p>使用此命令安装element-ui模块。</p>
<p>之后在main.js文件导入element组件和样式表，并使用ElementUI。即加入以下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import ElementUI from &#39;element-ui&#39;;</span><br><span class="line">import &#39;element-ui&#x2F;lib&#x2F;theme-chalk&#x2F;index.css&#39;;</span><br><span class="line"></span><br><span class="line">Vue.use(ElementUI);</span><br></pre></td></tr></table></figure>
<p>至此新项目便成功创建了。之后在<a href="https://element.eleme.cn/#/zh-CN/component/layout">element官网</a>中寻找所需组件复制粘贴即可构建自己需要的网页。</p>
<p>项目中应该会使用到axios插件(与post和get相关的)，此时需要使用命令<code>npm install --save axios</code>来安装该模块，之后在需要使用该模块的vue文件的&lt;script&gt;中加入:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import axios from &#39;axios&#39;</span><br></pre></td></tr></table></figure>
<h1 id="3-踩过的坑"><a href="#3-踩过的坑" class="headerlink" title="3.踩过的坑"></a>3.踩过的坑</h1><p>踩的坑挺多，简要提下：</p>
<ol>
<li><p><code>vue create my-app</code>，命令创建新项目。这种方式创建默认没有router。使用该方式新建项目使用<code>npm run serve</code>运行本地服务器</p>
</li>
<li><p>app.vue或者路由的index.js文件，对其他vue页面有引用，如果引用路径不对，或者vue页面名字不对，会报找不到模块的错误</p>
</li>
</ol>
<h1 id="4-参考文章"><a href="#4-参考文章" class="headerlink" title="4.参考文章"></a>4.参考文章</h1><p><a href="https://www.cnblogs.com/ming1025/p/9887247.html">vue-cli（vue脚手架）超详细教程</a></p>
]]></content>
      <categories>
        <category>technology</category>
      </categories>
      <tags>
        <tag>vue-cli</tag>
        <tag>element-ui</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>Word 2019 使用记录</title>
    <url>/2021/01/25/word-use/</url>
    <content><![CDATA[<h2 id="1-使用环境"><a href="#1-使用环境" class="headerlink" title="1.使用环境"></a>1.使用环境</h2><p>微软家庭学生版2019</p>
<h2 id="2-使用上的问题"><a href="#2-使用上的问题" class="headerlink" title="2.使用上的问题"></a>2.使用上的问题</h2><h3 id="2-1显示格式"><a href="#2-1显示格式" class="headerlink" title="2.1显示格式"></a>2.1显示格式</h3><p>word文档复制粘贴，或者有时的自动格式一下就把整个排版弄的乱七八糟，真很让人心烦。而且格式符实际也是占位置的，所以不如显示出格式符，看的反而更清晰。</p>
<p>1）依次点击：文件–&gt;选项，得到word选项框，如图：<br><img src="/2021/01/25/word-use/1.png"><br><img src="/2021/01/25/word-use/2.png"><br><img src="/2021/01/25/word-use/3.png"></p>
<p>2)在word选项框中选择<code>自定义功能区</code>，左侧的选择命令位置设置为<code>不在功能区的命令</code>，在左侧找到<code>显示格式</code>一项，如图：<br><img src="/2021/01/25/word-use/4.png"></p>
<p>3)在右侧选择视图，在其下<code>新建组</code>，<code>重命名</code>为“我添加的功能”，点击<code>添加</code>按钮，最后看到图中第5步显示便表名添加成功了(也不一定要在视图组下新建，可以按自己需求选择在合适的组下创建)，添加完成后点击确定返回就可以了，操作如图：<br><img src="/2021/01/25/word-use/5.png"></p>
<p>4)回到word文档中，选择视图下，我添加的功能，其中便有显示格式了，打开后可以在显示格式窗口中勾选显示所有格式标记，至此，该问题便得到了解决，操作如图：<br><img src="/2021/01/25/word-use/6.png"><br><img src="/2021/01/25/word-use/7.png"></p>
<h3 id="2-2显示格式法二"><a href="#2-2显示格式法二" class="headerlink" title="2.2显示格式法二"></a>2.2显示格式法二</h3><p>突然发现有更简单的显示格式，再次记录下，太简单了，直接上图吧：<br><img src="/2021/01/25/word-use/8.png"></p>
]]></content>
      <categories>
        <category>technology</category>
      </categories>
      <tags>
        <tag>word</tag>
      </tags>
  </entry>
  <entry>
    <title>windows 命令行命令使用记录</title>
    <url>/2021/10/27/win-cmd/</url>
    <content><![CDATA[<p>&lt;&gt;表示参数</p>
<h3 id="重命名文件和文件夹"><a href="#重命名文件和文件夹" class="headerlink" title="重命名文件和文件夹"></a>重命名文件和文件夹</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ren &lt;oldFilename&gt; &lt;newFilename&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>technology</category>
      </categories>
      <tags>
        <tag>windows</tag>
        <tag>cmd</tag>
      </tags>
  </entry>
  <entry>
    <title>数据挖掘调研</title>
    <url>/2021/11/21/data-mine/</url>
    <content><![CDATA[<h2 id="数据挖掘三大顶会"><a href="#数据挖掘三大顶会" class="headerlink" title="数据挖掘三大顶会"></a>数据挖掘三大顶会</h2><p>sigKDD：<a href="http://www.sigkdd.org/">http://www.sigkdd.org/</a></p>
<p>ICDM: <a href="http://www.cs.uvm.edu/~icdm/">http://www.cs.uvm.edu/~icdm/</a></p>
<p>SDM: <a href="http://www.siam.org/meetings/sdm07/">http://www.siam.org/meetings/sdm07/</a></p>
<h2 id="什么是数据挖掘"><a href="#什么是数据挖掘" class="headerlink" title="什么是数据挖掘"></a>什么是数据挖掘</h2><p>数据挖掘是一种技术，将传统的数据分析方法与处理大量数据的复杂算法相结合。</p>
<p>数据挖掘是在大型数据存储库中，自动发现有用信息的过程。</p>
<p>通过因特网的搜索引擎查找特定Web页面的过程为信息检索，而非数据挖掘。</p>
<h2 id="数据挖掘任务"><a href="#数据挖掘任务" class="headerlink" title="数据挖掘任务"></a>数据挖掘任务</h2><p>数据挖掘任务分两类：<code>预测任务</code>和<code>描述任务</code></p>
<p><code>预测任务</code>：根据其他属性的值，预测特定属性的值</p>
<p><code>描述任务</code>：导出概括数据中潜在联系的模式（相关、趋势、聚类、轨迹和异常）</p>
<p>四种主要的数据挖掘任务：</p>
<p><code>聚类分析</code><br><code>预测建模</code><br><code>关联分析</code><br><code>异常检测</code></p>
<h2 id="KDD2021会议部分论文"><a href="#KDD2021会议部分论文" class="headerlink" title="KDD2021会议部分论文"></a>KDD2021会议部分论文</h2><h3 id="出现较多的关键词"><a href="#出现较多的关键词" class="headerlink" title="出现较多的关键词"></a>出现较多的关键词</h3><p>图神经网络、时间序列、时空数据处理</p>
<h2 id="基于图神经网络的推荐系统研究综述"><a href="#基于图神经网络的推荐系统研究综述" class="headerlink" title="基于图神经网络的推荐系统研究综述"></a>基于图神经网络的推荐系统研究综述</h2><h3 id="知识了解"><a href="#知识了解" class="headerlink" title="知识了解"></a>知识了解</h3><h4 id="二部图（二分图）"><a href="#二部图（二分图）" class="headerlink" title="二部图（二分图）"></a>二部图（二分图）</h4><p>顶点集合可分割为两个互不相交的子集，且图中每条边依附的两个顶点分别属于两个集合</p>
<h4 id="异构图"><a href="#异构图" class="headerlink" title="异构图"></a>异构图</h4><p><code>同构图</code>中只存在一种节点和边，构建图神经网络时所有节点共享同样的模型参数并且拥有同样维度的特征空间。</p>
<p><code>异构图</code>中可以存在不止一种节点和边，因此不同类型节点可以拥有不同维度的特征或属性。</p>
<h4 id="关系数据库"><a href="#关系数据库" class="headerlink" title="关系数据库"></a>关系数据库</h4><p><code>关系数据库</code>：采用关系模型组织数据的数据库。简单说关系模式就是二维表格，如MySql 数据库。</p>
<p><code>非关系型数据库</code>：如NoSQL提出以键值存储数据，每个元组可以有不同的字段。代表有MongoDB，Redis</p>
<p>参考：</p>
<p><a href="https://zhuanlan.zhihu.com/p/78619241">关系数据库</a></p>
<p><a href="https://www.oracle.com/cn/database/what-is-a-relational-database/">https://www.oracle.com/cn/database/what-is-a-relational-database/</a></p>
<h4 id="知识图谱"><a href="#知识图谱" class="headerlink" title="知识图谱"></a>知识图谱</h4><p><code>知识图谱</code>：结构化的语义知识库，用于迅速描述物理世界中的概念及其相互关系。</p>
<p>通过对数据加工、处理、整合，转化为简单清晰的 “实体-关系-实体”或者“实体-属性-属性值” 三元组，最后聚合大量知识，实现知识的快速响应和推理。</p>
<p>其中数据来源有三类：</p>
<ul>
<li>结构化数据：关系数据库</li>
<li>半结构化数据：XML，JSON</li>
<li>非结构化数据：图片，音频，视频，文本</li>
</ul>
<p>知识图谱的构建过程分三步：信息抽取、知识融合、知识加工</p>
<p>信息抽取为从原始数据中提取实体，关系，实体属性等信息</p>
<p>知识融合包括实体链接和知识合并两部分。实体链接是将抽取的实体，链接到知识库中对应的正确实体对象。知识合并是将从第三方知识库或者结构化数据获取的知识，合并到知识库中。</p>
<p>知识加工包括本体构建、知识推理、质量评估。本体构建简单来说是将实体分类，比如“阿里巴巴”和“腾讯”是一类，“手机是另一类”。知识推理为完善知识图谱的实体间关系的步骤，比如已知A是B配偶，B是C的主席，C生活在城市D，则可以推理出A生活在城市D。质量评估为量化知识的可信度，舍弃置信度较低的知识来保证知识库的质量。</p>
<p><a href="https://www.cnblogs.com/huangyc/p/10043749.html">知识图谱详解</a></p>
<h3 id="CNN-卷积神经网络"><a href="#CNN-卷积神经网络" class="headerlink" title="CNN 卷积神经网络"></a>CNN 卷积神经网络</h3><p>CNN的本质作用：特征提取</p>
<p>CNN基本配置：卷积层、Relu层（非线性激活函数）、池化层、全连接层FC（Fully Connected layer）</p>
<p><code>卷积层</code>：从图片中选取特征，构造卷积核。使用卷积核在原图中滑动，对应相乘，取平均值，填入新图中，则得到一张新图，称为特征图。三个卷积核作用于原图则得到三个特征图。卷积核的大小，以及滑动步长可以自行选择，因此特征图小于原图。</p>
<p><code>非线性激活层</code>：神经网络中用到的最多的非线性激活函数为Relu函数，定义为，<code>f(x)=max(0,x)</code>。因为越接近1的值表明该区域与特征越接近，因此直接舍弃与特征不相关的数据，达到减少数据的目的。</p>
<p><code>pooling池化层</code>：池化的作用为减少数据量。池化分为最大池化 和 平均池化，分别为取最大值和取平均值。举例，选取2x2窗口对特征图池化，则为将原特征图划分为2x2的窗口，每个2x2窗口中选取最大值，构造新的特征图，如此，原图数据量变为了1/4。</p>
<p><code>全连接层</code>：神经网络中最普通的层，即一排神经元，每个神经元都和前一层的每个单元相连接，所以称为“全连接”。</p>
<p>非线性激活层在第一个参考链接的介绍中并非一个严格的层。CNN的结构可以由上面的各层组合，比如：</p>
<p><code>X--&gt;CONV(relu)--&gt;MAXPOOL--&gt;CONV(relu)--&gt;FC(relu)--&gt;FC(softmax)--&gt;Y</code></p>
<p>便是一个CNN网络的例子。</p>
<h4 id="CNN-与传统神经网络的区别"><a href="#CNN-与传统神经网络的区别" class="headerlink" title="CNN 与传统神经网络的区别"></a>CNN 与传统神经网络的区别</h4><p>1.参数共享机制</p>
<p>CNN实际是训练卷积核（filter）的中的内容，卷积层只需要卷积核便可以得到下一层的输入，因此参数数量由卷积核大小决定。而传统的神经网络为全连接层，参数数量巨大。举个例子：输入8x8图像，用一个9个单元的全连接层，则传统神经网络的参数为64x9个，使用9个单元的filter的CNN卷积层只有9个参数，故CNN参数数量大大减少。</p>
<p>2.连接的稀疏性</p>
<p>CNN卷积层输出图像的每个单元只与输入图像的一部分有关，相比传统神经网络的全连接，更具有优势。</p>
<p>结合图片讲解效果会更好，更详细参考见链接：<br><a href="https://zhuanlan.zhihu.com/p/42559190">https://zhuanlan.zhihu.com/p/42559190</a><br><a href="https://zhuanlan.zhihu.com/p/27908027">https://zhuanlan.zhihu.com/p/27908027</a></p>
<h3 id="GNN-图神经网络-相关知识"><a href="#GNN-图神经网络-相关知识" class="headerlink" title="GNN 图神经网络 相关知识"></a>GNN 图神经网络 相关知识</h3><h4 id="邻接矩阵"><a href="#邻接矩阵" class="headerlink" title="邻接矩阵"></a>邻接矩阵</h4><p><code>邻接矩阵</code>是图的一种表示方式，利用一个一维数组和二维矩阵来表示一个图。一维矩阵存储顶点信息，二维矩阵存储边的信息，表示顶点之间的连接关系，以及边的权值。</p>
<h4 id="Word2Vec-原理"><a href="#Word2Vec-原理" class="headerlink" title="Word2Vec 原理"></a>Word2Vec 原理</h4><p>Word2Vec 是用来生成词向量的工具。词向量是由句子编码得到的向量，方便NLP中的机器学习算法来处理。<br>常见的编码方式有两种：<code>One-Hot Representation</code>和<code>Distributed Representation</code></p>
<p><code>One-Hot Representation</code>方法为：用一个很长的向量表示一个词，向量长度为词典大小，向量中只有一个1，其余都是0，1表示词在字典中的位置。缺点：1）维数灾难。词汇量很大时，向量维度很长。2）词汇鸿沟。任意两个词之间是孤立的，没有刻画词与词之间的相关性。3）强稀疏性。0特别多，有用信息少。</p>
<p><code>Distributed Representation</code>方法为：通过训练的方法，将一种语言中的每一个词映射为一个固定长度的短向量（想对One-Hot而言的短）。所有向量构成一个向量空间，向量与向量间的距离表示两个词之间语法、语义的相似性。</p>
<p>Word2Vec 是轻量级神经网络，仅包括输入层、隐藏层、输出层。根据输入输出不同，主要包括CBOW和Skip-gram模型。</p>
<h5 id="何为Embedding？"><a href="#何为Embedding？" class="headerlink" title="何为Embedding？"></a>何为Embedding？</h5><p>广义概念为：通过训练的网络或者其他构造方法得到的样本的特征向量称作Embedding。</p>
<p>狭义概念为：一个元素的Embedding是该元素传播到神经网络的隐藏层（Word2Vec模型）计算得出的向量。</p>
<p>参考：<br><a href="https://zhuanlan.zhihu.com/p/114538417">https://zhuanlan.zhihu.com/p/114538417</a></p>
<h4 id="图表示学习"><a href="#图表示学习" class="headerlink" title="图表示学习"></a>图表示学习</h4><h5 id="节点Embedding"><a href="#节点Embedding" class="headerlink" title="节点Embedding"></a>节点Embedding</h5><p>节点的Embedding特征向量的距离，要与节点间的相似度对应。目的是学习得到包含所有节点Embedding的矩阵。问题在于如何定义节点间的相似度。有以下三种方法：<br><code>Adjacency-based Similarity</code>：使用原图的邻接矩阵。直接使用节点u与节点v之间的边的权重和节点间Embedding向量的距离，来构造损失loss，训练使得loss最小，得到最优Embedding矩阵。</p>
<p><code>Multi-hop similarity</code>：与第一种方法类似，但是考虑多跳节点之间的关系。</p>
<p><code>Random walk approaches</code>：随机游走方法是，从每个节点出发，以一定的游走策略走一定跳数，得到每个节点对应的访问节点集合Nr(u)，最优根据公式；最优化Embedding。游走策略有BFS（广度优先）和DFS（深度优先）。BFS更利于探索局部微观信息，DFS更利于探索全局宏观信息。最后的策略将两者结合，分别设置一定概率执行BFS或DFS。</p>
<p>随机游走的节点表征方法包括DeepWalk、Node2Vec。DeepWalk走向邻居节点的概率均等，而Node2Vec引入了使用DFS，BFS的概率。</p>
<p>以上三种Embedding为“shallow” Embedding，GNN的目的则是获得“Deep” Embedding。</p>
<h4 id="GNN"><a href="#GNN" class="headerlink" title="GNN"></a>GNN</h4><p>GNN 的目标是学习得到每个节点的嵌入向量Embedding，该向量包含每个节点的邻居节点的信息。基本GNN结构如下图所示：<br><img src="/2021/11/21/data-mine/data-mining-1.png"><br>有GCN(Graph Convolutional Networks)、GraphSAGE、Gated Graph Neural Network、Gubgraph Embeddings 4种模型来获取Embedding。</p>
<p>更具体讲解参考：<br><a href="http://snap.stanford.edu/proj/embeddings-www/">图表示学习</a><br><a href="https://zhuanlan.zhihu.com/p/76001080">GNN综述</a></p>
<h2 id="论文阅读笔记"><a href="#论文阅读笔记" class="headerlink" title="论文阅读笔记"></a>论文阅读笔记</h2><h3 id="Graph-Neural-Networks-for-Recommender-Systems-Challenges-Methods-and-Directions"><a href="#Graph-Neural-Networks-for-Recommender-Systems-Challenges-Methods-and-Directions" class="headerlink" title="Graph Neural Networks for Recommender Systems: Challenges, Methods, and Directions"></a>Graph Neural Networks for Recommender Systems: Challenges, Methods, and Directions</h3><h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>推荐系统和图神经网络发展介绍</p>
<h4 id="挑战"><a href="#挑战" class="headerlink" title="挑战"></a>挑战</h4><p>图神经网络应用于推荐系统的挑战</p>
<h4 id="现存方法"><a href="#现存方法" class="headerlink" title="现存方法"></a>现存方法</h4><p>GNN 在推荐系统实现阶段、推荐场景、GNN的目标、GNN在特定推荐中的应用</p>
<h4 id="问题和未来研究方向"><a href="#问题和未来研究方向" class="headerlink" title="问题和未来研究方向"></a>问题和未来研究方向</h4><h2 id="如何写好一篇综述？"><a href="#如何写好一篇综述？" class="headerlink" title="如何写好一篇综述？"></a>如何写好一篇综述？</h2><p>目前的认识来看，写好一篇综述是需要不少时间的。因为只有真正了解与理解了一件事情，才能把它说清楚。就目前看到的别人写的综述，动辄3，40页，这里首先诚恳的承认他们能够写出来是很厉害的，但是他们写出来的综述，作者并非一个人，而是一群人，写完综述所用的时间，也是我不知道的，我想应该不会几天或者一周就能完成。</p>
<p>我认为这种很长的综述，是一个小组一起看论文，然后组会分享，经过大家共同的努力完成的。我还没有亲眼见识过科研很厉害的人，那种能够放下其他一切事情，沉入到课题中去，或者是效率很高，能够短时间了解接触的一个新领域，并迅速做出成果的人。我也还没有开过组会，只是听说过组会便是分享自己一周所作的工作，但是，我觉得组会还是很有作用的，便不展开阐述了。</p>
<p>回到我自己的处境来，我该如何写好我的这篇综述呢？以往写的综述，基本是从网上到处找内容复制粘贴，拼拼凑凑成一篇论文，这样写出来的东西肯定是不行的。后来找过英文综述，然后翻译成中文，其实这样也不妥。一来算是抄袭；二来只是照搬别人的思想，没有自己的理解，况且一般英文综述都比较长，只能挑其中的一部分来翻译，最后得到的综述也不完整。</p>
<p>所以，现在得出的结论为，想要在有限的，短短几天的时间内，写出一篇看起来还不错的综述，只好先理解别人写好的综述，再按照自己的想法重新组织内容，写出自己的综述。因为时间有限，且自己目前阅读文献的速度不够快，只看些综述便是极限了，如果时间再宽一点点，或许看些论文的摘要也会有用。然后要想写好，还是得自己来组织内容才是，毕竟抄袭始终不是正途。</p>
<p>既如此，目前的目标已经明确，看目前搜集的几篇综述，整理出自己想法的大纲框架，然后开始写综述。</p>
<p>看别人写的综述，将不同文献分类并整理出来，感觉还是需要对该领域的一定了解的。至少我自己目前便没有把握将其分类，也没有时间阅读那么多会议论文，并将其归为自己划分的类中。</p>
]]></content>
      <categories>
        <category>technology</category>
      </categories>
      <tags>
        <tag>data mine</tag>
      </tags>
  </entry>
  <entry>
    <title>摄影学习</title>
    <url>/2021/12/24/photography/</url>
    <content><![CDATA[<h2 id="摄影后期"><a href="#摄影后期" class="headerlink" title="摄影后期"></a>摄影后期</h2><h3 id="八大影调"><a href="#八大影调" class="headerlink" title="八大影调"></a>八大影调</h3><p>绘画七大组成元素：点、线、面、空间、质地、明暗、色彩</p>
<p>数码后期：修改明暗、色彩</p>
<h4 id="明暗"><a href="#明暗" class="headerlink" title="明暗"></a>明暗</h4><p>圆如何变成一个球？通过明暗光照对比，使其显出立体感。</p>
<p>明暗分高、中间调、暗调</p>
<p><code>高调</code>：清爽、明快</p>
<p><code>中间调</code>：静谧、柔和</p>
<p><code>暗调</code>：深沉、压抑</p>
<p>光比：一张照片亮部与暗部的受光比例，即最亮的部分与最暗的部分的光强比</p>
<p><code>硬调</code>：明暗反差较大</p>
<p><code>软调</code>：明暗反差不大，比较柔和</p>
<h4 id="色彩"><a href="#色彩" class="headerlink" title="色彩"></a>色彩</h4><p>色彩的三个属性：色相、明度、纯度</p>
<p>色彩饱和度：即色彩的鲜艳程度，也称纯度。饱和度为0时就变成灰色</p>
<p><code>纯调</code> vs <code>灰调</code>：代表整体画面的饱和，饱和高的为纯调，饱和低的为灰调</p>
<p><code>冷调</code> vs <code>暖调</code>：冷调指画面总体颜色偏青蓝紫，暖调指整体画面偏红橙黄</p>
<p><code>调和调</code> vs <code>对比调</code>：画面配色方法。下图色相环中，相距120°~180°的颜色为对比色，反差强烈；相距60°内的颜色为调和色，反差较小，较柔和</p>
<p><img src="/2021/12/24/photography/photography1.png"></p>
<h3 id="塑造画面层次"><a href="#塑造画面层次" class="headerlink" title="塑造画面层次"></a>塑造画面层次</h3><p>层次源于对比。灰度（黑白灰）的对比，色彩（色相，饱和，明暗）的对比。</p>
<p>灰度对比：黑白对比较强，人物与背景灰度的对比来突出人物</p>
<p>冷暖对比：人物照中，人物暖色，背景冷色，突出人物</p>
<p>白平衡：</p>
<p>曲线、分离色调：</p>
<p>HSL：调色，固有色调整</p>
<p>修片：camera row 修70%，PS修20%~30%</p>
<p>饱和对比：饱和度高的更突出，饱和度低的则较不显眼</p>
]]></content>
  </entry>
  <entry>
    <title>What&#39;s Nodejs?</title>
    <url>/2022/03/09/Learn-about-Nodejs/</url>
    <content><![CDATA[<p>忙完最近这个网站开发就写…</p>
]]></content>
      <categories>
        <category>technology</category>
      </categories>
  </entry>
</search>
