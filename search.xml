<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Bulid Blog With Hexo</title>
    <url>/2020/09/22/build-blog/</url>
    <content><![CDATA[<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>安装环境为win10；<br>安装hexo框架，需要先安装该框架的依赖环境：<br>1.hexo<br>2.Git</p>
<p>hexo博客框架基于Node.js渲染，必须先安装Node.js环境。<br>Git 用来帮助部署到Github Pages静态仓库上，以域名的形式访问。</p>
<h2 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h2><h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><p>打开Git Bash, 安装过程大多使用npm命令（源在国外）</p>
<p>安装hexo，在GItBash中输入以下命令，等待操作完成：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm install -g hexo</span><br></pre></td></tr></table></figure>
<h3 id="初始化hexo"><a href="#初始化hexo" class="headerlink" title="初始化hexo"></a>初始化hexo</h3><p>创建hexo文件夹，我个人是F:\blog\hexo，存放文章和代码的地方:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cd &#x2F;f&#x2F;blog&#x2F;hexo</span><br><span class="line">$ hexo init</span><br></pre></td></tr></table></figure>
<p>通过以上命令就在对应位置创建并初始化好了hexo文件夹。  </p>
<p>hexo文件夹中有一个<code>_config.yml</code>文件，为站点根目录配置文件，在其中可修改blog的各种配置。<br>比如切换语言为中文，将language值修改为zh-CN：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Site 站点主配置</span><br><span class="line">title: sanarous教你搭建Hexo博客  &#x2F;&#x2F;网站标题修改</span><br><span class="line">subtitle: so easy~  &#x2F;&#x2F;副标题修改</span><br><span class="line">description:  &#x2F;&#x2F;网站描述</span><br><span class="line">keywords: hexo,next,Java,博客    &#x2F;&#x2F;网站关键字,用英文逗号分开</span><br><span class="line">author: Sanarous   &#x2F;&#x2F;此处填写你自己的昵称  </span><br><span class="line">+ language: zh-CN    &#x2F;&#x2F;这里改成上面在主题配置文件中看到的语言名字，注意英文冒号:后面有一个空格</span><br><span class="line">timezone:   &#x2F;&#x2F;网站时区，保持默认就可以了</span><br></pre></td></tr></table></figure>
<p>之后回到GitBash命令行，在hexo根目录输入以下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo g &amp;&amp; hexo s</span><br></pre></td></tr></table></figure>
<p>再打开浏览器，输入<code>http://localhost:4000</code>就可以看到已经做好的博客<br><code>hexo g</code>即<code>hexo generate</code>是重新生成public文件夹的命令，<code>hexo s</code>即<code>hexo server</code>是开启hexo服务器的命令。<code>hexo s</code>具有在线调试的功能。  </p>
<p>public 文件夹是生成的所有静态文件，html、css、js文件以及图片等。这个文件夹是博客被Node.js渲染后生成的最终文件夹。</p>
<h3 id="将hexo博客部署到GitHub上"><a href="#将hexo博客部署到GitHub上" class="headerlink" title="将hexo博客部署到GitHub上"></a>将hexo博客部署到GitHub上</h3><p>具体操作见参考文章</p>
<h3 id="写博客"><a href="#写博客" class="headerlink" title="写博客"></a>写博客</h3><p>在hexo根目录执行gitbash命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo new &lt;postname&gt;</span><br></pre></td></tr></table></figure>
<p>就可以在<code>hexo/source/_posts</code> 文件夹下新建一个<code>.md</code>文件，即markdown文件，写博客只需本地编辑该文件。</p>
<p>将本地更新上传到GitHub上，使用命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo clean &amp;&amp; hexo g $$ hexo deploy</span><br></pre></td></tr></table></figure>

<h2 id="主题-amp-功能配置"><a href="#主题-amp-功能配置" class="headerlink" title="主题&amp;功能配置"></a>主题&amp;功能配置</h2><h3 id="关于配置文件的说明"><a href="#关于配置文件的说明" class="headerlink" title="关于配置文件的说明"></a>关于配置文件的说明</h3><p>使用到的有2个配置文件：hexo文件夹下的<code>_config.yml</code>配置文件；主题中的配置文件<code>hexo\themes\next6\_config.yml</code>，其中next6为下载的主题文件夹名称。</p>
<h3 id="下载安装Next主题"><a href="#下载安装Next主题" class="headerlink" title="下载安装Next主题"></a>下载安装Next主题</h3><p>我使用的是Next6版本，下载地址：<a href="https://github.com/theme-next/hexo-theme-next">https://github.com/theme-next/hexo-theme-next</a><br>将下载好的主题放在<code>F:\blog\hexo\themes\</code>下面。</p>
<h3 id="设置主题为Next主题"><a href="#设置主题为Next主题" class="headerlink" title="设置主题为Next主题"></a>设置主题为Next主题</h3><p>站点根目录的配置文件<code>_config.yml</code>中，修改主题名：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Extensions</span><br><span class="line">## Plugins: https:&#x2F;&#x2F;hexo.io&#x2F;plugins&#x2F;</span><br><span class="line">## Themes: https:&#x2F;&#x2F;hexo.io&#x2F;themes&#x2F;</span><br><span class="line">- theme: landscape      # 更改原始默认的主题名称，修改为如下</span><br><span class="line">+ theme: hexo-theme-next   # 此处填入你在themes目录下的next主题文件名</span><br></pre></td></tr></table></figure>

<h3 id="Next主题功能配置"><a href="#Next主题功能配置" class="headerlink" title="Next主题功能配置"></a>Next主题功能配置</h3><p>以下配置若未特别提及，均在主题配置文件中更改</p>
<h4 id="修改favicon图标"><a href="#修改favicon图标" class="headerlink" title="修改favicon图标"></a>修改favicon图标</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">favicon:</span><br><span class="line">  small: &#x2F;images&#x2F;1.png</span><br><span class="line">  medium: &#x2F;images&#x2F;1.png</span><br><span class="line">  apple_touch_icon: &#x2F;1.png</span><br><span class="line">  safari_pinned_tab: &#x2F;1.png</span><br><span class="line">  #android_manifest: &#x2F;images&#x2F;manifest.json</span><br><span class="line">  #ms_browserconfig: &#x2F;images&#x2F;browserconfig.xml</span><br></pre></td></tr></table></figure>
<p>将想用图标放在主题目录<code>source\images</code>中按照相对路径方式引用即可。也可直接引用第三方图片链接。</p>
<h4 id="阅读更多按钮设置"><a href="#阅读更多按钮设置" class="headerlink" title="阅读更多按钮设置"></a>阅读更多按钮设置</h4><p>1.文章首部<code>front-matter</code>中添加description，提供文章摘录。注意主题配置文件中设置<code>excerpt_description</code>为true才会生效<br>2.在文章中插入<code>&lt;!-- more --&gt;</code>，则该标识后的内容不会显示出来，使用灵活。</p>
<h4 id="设置文章阅读量"><a href="#设置文章阅读量" class="headerlink" title="设置文章阅读量"></a>设置文章阅读量</h4><p>搜索<code>leancloud_visitors</code>,将enable设置为true。需要安装<code>hexo-leancloud-counter-security</code>模块。和valine评论一样，需要的leanCloud的appid和appkey，并且要在leancloud中创建classes对象存储。还需要在根目录配置文件中加入以下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">leancloud_counter_security:</span><br><span class="line">  enable_sync: true</span><br></pre></td></tr></table></figure>

<h4 id="看板娘设置"><a href="#看板娘设置" class="headerlink" title="看板娘设置"></a>看板娘设置</h4><p>见文章:<a href="https://github.com/stevenjoezhang/live2d-widget">https://github.com/stevenjoezhang/live2d-widget</a></p>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://blog.bestzuo.cn/posts/blog-establish.html">Hexo博客+Next主题深度优化与定制</a><br><a href="http://yearito.cn/posts/hexo-advanced-settings.html">Hexo 搭建个人博客系列：进阶设置篇</a><br><a href="https://github.com/stevenjoezhang/live2d-widget">把萌萌哒的看板娘抱回家 (ノ≧∇≦)ノ | Live2D widget for web platform</a></p>
]]></content>
      <categories>
        <category>technology</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>vue-cli + Element-ui 前端开发</title>
    <url>/2020/09/25/vue-cli-Element-ui/</url>
    <content><![CDATA[<h1 id="开发环境搭建"><a href="#开发环境搭建" class="headerlink" title="开发环境搭建"></a>开发环境搭建</h1><h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><ul>
<li>需要提前安装Node.js</li>
<li>使用npm（需要node环境）全局安装webpack</li>
<li>推荐安装Git，Git用处挺大，有机会单独写写关于Git的使用经验</li>
<li>编辑器推荐VS Code</li>
</ul>
<p>webpack 4.X开始，需要安装webpack-cli依赖，故使用以下命令同时安装webpack和webpack-cli:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install webpack webpack-cli -g</span><br></pre></td></tr></table></figure>
<p>安装成功后，输入命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">webpack -v</span><br></pre></td></tr></table></figure>
<p>显示出webpack的版本号则表示安装成功<br><br><br>有了webpack-dev-server 的支持，可以启动一个请求服务器，为你搭建一个测试环境，可以在线调试</p>
<h2 id="安装vue-cli"><a href="#安装vue-cli" class="headerlink" title="安装vue-cli"></a>安装vue-cli</h2><p>安装好上述的webpack后，全局安装vue-cli，在cmd（或gitbash）中输入命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install --global vue-cli</span><br></pre></td></tr></table></figure>
<p>安装完成后，使用命令查看vue-cli版本(注意命令中的-V为大写)：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vue -V</span><br></pre></td></tr></table></figure>
<p>成功显示出版本号则表示安装成功<br><br><br>打开C:\Users\Andminster\AppData\Roaming\npm 目录可以看见圈出部分，说明已安装好：</p>
<p><img src="/2020/09/25/vue-cli-Element-ui/myBlog-vuecli-1.png"></p>
<h2 id="用vue-cli构建新项目"><a href="#用vue-cli构建新项目" class="headerlink" title="用vue-cli构建新项目"></a>用vue-cli构建新项目</h2><ol>
<li>在F盘新建一个文件夹vueProj,用来存放项目，cd命令进入该文件夹，执行命令： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vue init webpack test</span><br></pre></td></tr></table></figure>
 之后会跳出一系列选项，可以一直回车确认，选择默认项，但是否使用ESLint一项建议选择no（ESLint是一款检查代码错误和规范的插件，但因为太严格，所以不推荐使用）<br> 选项确认完毕后就开始构建项目了</li>
<li>项目构建完成后，cd命令<code>cd test</code>进入项目文件夹，使用下面命令可以安装全部项目依赖 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure>
 但使用<code>vue init webpack test</code>命令构建项目以及选择了安装全部依赖选项，故不必再执行上述命令。<br> 安装好后的文件夹如下:<br> <img src="/2020/09/25/vue-cli-Element-ui/myBlog-vuecli-2.png"></li>
<li>在项目根目录test下，运行命令： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure>
 然后会开启一个本服务器，按地址访问即可看见初始的helloworld界面。</li>
</ol>
<p>至此，最经典的helloworld示例便完成了。</p>
<h1 id="上手新项目的流程"><a href="#上手新项目的流程" class="headerlink" title="上手新项目的流程"></a>上手新项目的流程</h1><h1 id="踩过的坑"><a href="#踩过的坑" class="headerlink" title="踩过的坑"></a>踩过的坑</h1><h1 id="使用该框架构建前端页面的知识积累"><a href="#使用该框架构建前端页面的知识积累" class="headerlink" title="使用该框架构建前端页面的知识积累"></a>使用该框架构建前端页面的知识积累</h1><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1>]]></content>
      <categories>
        <category>technology</category>
      </categories>
      <tags>
        <tag>vue-cli</tag>
        <tag>element-ui</tag>
        <tag>前端</tag>
      </tags>
  </entry>
</search>
